---
- name: Migrate Docker from Alpine to Debian LXCs
  hosts: debian_migration_targets
  gather_facts: no
  vars:
    docker_path: "/var/docker"
    ssh_key_path: "/root/.ssh/id_rsa"
    
  tasks:
    - name: Validate survey variables
      block:
        - name: Check if source_machine is provided
          fail:
            msg: "Source machine must be provided via Survey variable 'source_machine'"
          when: source_machine is not defined or source_machine == ''
          run_once: true

        - name: Check if destination_machine is provided
          fail:
            msg: "Destination machine must be provided via Survey variable 'destination_machine'"
          when: destination_machine is not defined or destination_machine == ''
          run_once: true

        - name: Filter to run only on destination machine
          meta: end_host
          when: inventory_hostname != destination_machine

    - name: Gather facts for destination machine only
      setup:

    - name: Display migration info
      debug:
        msg: |
          ================================
          Docker Migration (Selective Sync)
          ================================
          Source: {{ source_machine }} (Alpine)
          Target: {{ destination_machine }} (Debian)
          Docker Path: {{ docker_path }}
          Migration Type: Preserve existing containers
          ================================

    - name: Check if SSH key exists
      stat:
        path: "{{ ssh_key_path }}"
      register: ssh_key_stat
      
    - name: Fail if SSH key missing
      fail:
        msg: "SSH key not found at {{ ssh_key_path }}. Run SSH key deployment first."
      when: not ssh_key_stat.stat.exists

    - name: Test connectivity to Alpine source
      command: >
        ssh -i {{ ssh_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        ansible@{{ source_machine }}
        'echo "Connection successful"'
      register: connectivity_test
      changed_when: false

    - name: Stop Docker service on Alpine source (to ensure clean sync)
      command: >
        ssh -i {{ ssh_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        ansible@{{ source_machine }}
        'sudo rc-service docker stop'
      register: alpine_docker_stop
      ignore_errors: yes
      changed_when: false

    - name: Stop Docker service on target Debian LXC
      systemd:
        name: docker
        state: stopped
      ignore_errors: yes

    - name: Create backup of existing docker directory
      shell: |
        echo "Skipping backup - using selective sync to preserve existing containers"
        echo "backup_created=none"
      register: backup_result
      tags: backup

    - name: Display backup result
      debug:
        msg: "{{ backup_result.stdout }}"

    - name: Ensure docker directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ docker_path }}/stacks"
        - "{{ docker_path }}/data"

    - name: Synchronize new stacks from Alpine source (selective sync)
      shell: |
        rsync -avz --progress \
          -e "ssh -i {{ ssh_key_path }} -o StrictHostKeyChecking=no" \
          --rsync-path="sudo rsync" \
          --ignore-existing \
          ansible@{{ source_machine }}:{{ docker_path }}/stacks/ {{ docker_path }}/stacks/
      register: stacks_sync_result

    - name: Synchronize new data from Alpine source (selective sync)
      shell: |
        rsync -avz --progress \
          -e "ssh -i {{ ssh_key_path }} -o StrictHostKeyChecking=no" \
          --rsync-path="sudo rsync" \
          --ignore-existing \
          ansible@{{ source_machine }}:{{ docker_path }}/data/ {{ docker_path }}/data/
      register: data_sync_result

    - name: Display sync summary
      debug:
        msg: |
          Selective sync completed:
          - Stacks: {{ 'Success' if stacks_sync_result.rc == 0 else 'Failed' }}
          - Data: {{ 'Success' if data_sync_result.rc == 0 else 'Failed' }}
          - Existing containers preserved

    - name: Start Docker service on target
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Start Docker service on Alpine source (restore service)
      command: >
        ssh -i {{ ssh_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        ansible@{{ source_machine }}
        'sudo rc-service docker start'
      register: alpine_docker_start
      ignore_errors: yes
      changed_when: false
        
    - name: Wait for Docker to be ready
      pause:
        seconds: 10

    - name: Verify Docker is running
      command: docker --version
      register: docker_version
      
    - name: Display Docker version
      debug:
        msg: "{{ docker_version.stdout }}"

    - name: Find Docker Compose stack directories
      find:
        paths: "{{ docker_path }}/stacks"
        file_type: directory
        recurse: no
      register: stack_directories
      ignore_errors: yes

    - name: Display found stacks
      debug:
        msg: |
          Found {{ stack_directories.files | length }} stack directories:
          {% for stack in stack_directories.files %}
          - {{ stack.path | basename }}
          {% endfor %}
      when: stack_directories.files is defined

    - name: Check for compose.yaml in each stack directory
      stat:
        path: "{{ item.path }}/compose.yaml"
      register: compose_files
      loop: "{{ stack_directories.files }}"
      when: stack_directories.files is defined

    - name: Start each stack with compose.yaml
      shell: |
        cd {{ item.item.path }}
        docker compose up -d
      register: compose_results
      loop: "{{ compose_files.results }}"
      when: 
        - stack_directories.files is defined
        - item.stat.exists
      ignore_errors: yes

    - name: Display stack startup results
      debug:
        msg: |
          Stack: {{ item.item.item.path | basename }}
          Status: {% if item.rc == 0 %}✓ Started successfully{% else %}✗ Failed to start{% endif %}
          {% if item.rc != 0 %}
          Error: {{ item.stderr | default('Unknown error') }}
          {% endif %}
      loop: "{{ compose_results.results }}"
      when: compose_results.results is defined

    - name: Migration summary
      debug:
        msg: |
          ================================
          Migration Summary for {{ destination_machine }}
          ================================
          Source: {{ source_machine }}
          Docker sync: {{ 'Success' if (stacks_sync_result.rc == 0 and data_sync_result.rc == 0) else 'Failed' }}
          Docker service: {{ '✓ Running' if docker_version is defined else '✗ Not running' }}
          Stacks found: {{ stack_directories.files | length if stack_directories.files is defined else 0 }}
          Stacks started: {{ compose_results.results | selectattr('rc', 'equalto', 0) | list | length if compose_results.results is defined else 0 }}
          Migration Type: ✓ Selective (existing containers preserved)
          ================================
