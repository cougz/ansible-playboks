---
- name: Infrastructure Server Readiness and Configuration Check
  hosts: all
  gather_facts: yes
  become: yes
  vars:
    check_results: []
    required_packages:
      Alpine:
        - python3
        - py3-pip
        - curl
        - wget
        - tar
        - gzip
        - openssh
        - sudo
      Debian:
        - python3
        - python3-pip
        - curl
        - wget
        - tar
        - gzip
        - openssh-server
        - sudo
    
  tasks:
    - name: Initialize check results
      set_fact:
        check_results: []

    # Basic connectivity and system info
    - name: Test basic connectivity (ping)
      ping:
      register: ping_result
      
    - name: Add ping result to checks
      set_fact:
        check_results: "{{ check_results + [{'check': 'Basic Connectivity', 'status': 'PASS', 'details': 'SSH connection successful'}] }}"
      when: ping_result is succeeded

    - name: Gather comprehensive system facts
      setup:
      register: facts_result

    - name: Display detailed system information
      debug:
        msg: |
          ================================================
          System: {{ ansible_hostname }} ({{ ansible_fqdn }})
          ================================================
          OS Family: {{ ansible_os_family }}
          Distribution: {{ ansible_distribution }}
          Version: {{ ansible_distribution_version }}
          Release: {{ ansible_distribution_release | default('N/A') }}
          Architecture: {{ ansible_architecture }}
          Kernel: {{ ansible_kernel }}
          Python Version: {{ ansible_python_version }}
          Uptime: {{ ansible_uptime_seconds | int // 86400 }} days
          IP Address: {{ ansible_default_ipv4.address | default('N/A') }}
          Memory: {{ (ansible_memtotal_mb / 1024) | round(1) }}GB total
          CPU Cores: {{ ansible_processor_vcpus }}
          ================================================

    # Check OS compatibility
    - name: Verify supported OS (Alpine or Debian-based)
      assert:
        that:
          - ansible_os_family in ['Alpine', 'Debian']
        fail_msg: "Unsupported OS family: {{ ansible_os_family }}. Only Alpine and Debian-based systems are supported."
        success_msg: "OS check passed: {{ ansible_distribution }} ({{ ansible_os_family }})"
      register: os_check

    - name: Add OS compatibility result to checks
      set_fact:
        check_results: "{{ check_results + [{'check': 'OS Compatibility', 'status': 'PASS', 'details': ansible_distribution + ' ' + ansible_distribution_version + ' (' + ansible_os_family + ')'}] }}"
      when: os_check is succeeded

    # Python availability and version check
    - name: Check Python3 installation and version
      command: python3 --version
      register: python_check
      changed_when: false
      failed_when: false

    - name: Check Python3 pip availability
      command: python3 -m pip --version
      register: pip_check
      changed_when: false
      failed_when: false

    - name: Add Python check results
      set_fact:
        check_results: "{{ check_results + [{'check': 'Python3 Available', 'status': 'PASS', 'details': python_check.stdout}] }}"
      when: python_check.rc == 0

    - name: Add pip check results
      set_fact:
        check_results: "{{ check_results + [{'check': 'Python3 Pip', 'status': 'PASS' if pip_check.rc == 0 else 'WARN', 'details': pip_check.stdout if pip_check.rc == 0 else 'pip not available'}] }}"

    # Package manager checks and capabilities
    - name: Check Alpine package manager (apk)
      block:
        - name: Test apk functionality
          command: apk --version
          register: apk_version
          changed_when: false

        - name: Check apk repositories
          command: apk update --quiet
          register: apk_update
          changed_when: false
          failed_when: false

        - name: Add apk check results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Package Manager (apk)', 'status': 'PASS', 'details': apk_version.stdout},
              {'check': 'Package Repositories', 'status': 'PASS' if apk_update.rc == 0 else 'WARN', 'details': 'Repository update ' + ('successful' if apk_update.rc == 0 else 'failed')}
            ] }}"
      when: ansible_os_family == 'Alpine'

    - name: Check Debian package manager (apt)
      block:
        - name: Test apt functionality
          command: apt --version
          register: apt_version
          changed_when: false

        - name: Check apt package lists freshness
          stat:
            path: /var/lib/apt/lists
          register: apt_lists

        - name: Check if apt update is needed
          find:
            paths: /var/lib/apt/lists
            file_type: file
            age: 1d
          register: apt_age_check

        - name: Add apt check results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Package Manager (apt)', 'status': 'PASS', 'details': apt_version.stdout.split('\n')[0]},
              {'check': 'Package Lists', 'status': 'WARN' if apt_age_check.files | length == 0 else 'PASS', 'details': 'Package lists ' + ('may need updating' if apt_age_check.files | length == 0 else 'are current')}
            ] }}"
      when: ansible_os_family == 'Debian'

    # Privilege escalation comprehensive check
    - name: Test privilege escalation capabilities
      block:
        - name: Check current user
          command: whoami
          register: current_user
          become: no
          changed_when: false

        - name: Test sudo elevation
          command: whoami
          register: sudo_check
          become: yes
          changed_when: false

        - name: Check sudo configuration
          command: sudo -l
          register: sudo_config
          become: no
          changed_when: false
          failed_when: false

        - name: Add privilege escalation results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Current User', 'status': 'INFO', 'details': current_user.stdout},
              {'check': 'Privilege Escalation', 'status': 'PASS' if sudo_check.stdout == 'root' else 'FAIL', 'details': 'Can escalate to ' + sudo_check.stdout if sudo_check.stdout == 'root' else 'Cannot escalate privileges'},
              {'check': 'Sudo Configuration', 'status': 'INFO', 'details': 'Sudo rules available' if sudo_config.rc == 0 else 'Limited sudo access'}
            ] }}"

    # System resources and capacity checks
    - name: Comprehensive system resource check
      block:
        - name: Check disk space on all mounted filesystems
          shell: df -h | grep -E '^/dev|^overlay' | awk '{print $1":"$4":"$5}'
          register: disk_space
          changed_when: false

        - name: Check memory usage
          shell: free -h | awk 'NR==2{printf "Total:%s Used:%s Available:%s Usage:%.1f%%", $2, $3, $7, ($3/$2)*100}'
          register: memory_info
          changed_when: false

        - name: Check system load
          shell: uptime | awk -F'load average:' '{print $2}' | sed 's/^[ \t]*//'
          register: system_load
          changed_when: false

        - name: Add system resource results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Disk Space', 'status': 'INFO', 'details': disk_space.stdout_lines | join(', ')},
              {'check': 'Memory Usage', 'status': 'INFO', 'details': memory_info.stdout},
              {'check': 'System Load', 'status': 'INFO', 'details': system_load.stdout}
            ] }}"

    # Network and connectivity checks
    - name: Network connectivity and DNS checks
      block:
        - name: Test external connectivity (Google DNS)
          uri:
            url: https://8.8.8.8
            method: HEAD
            timeout: 5
          register: external_connectivity
          failed_when: false

        - name: Test DNS resolution
          command: nslookup google.com
          register: dns_check
          changed_when: false
          failed_when: false

        - name: Test HTTPS connectivity
          uri:
            url: https://www.google.com
            method: HEAD
            timeout: 10
          register: https_check
          failed_when: false

        - name: Add network check results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'External Connectivity', 'status': 'PASS' if external_connectivity.status is defined else 'FAIL', 'details': 'Can reach external hosts' if external_connectivity.status is defined else 'Cannot reach external hosts'},
              {'check': 'DNS Resolution', 'status': 'PASS' if dns_check.rc == 0 else 'FAIL', 'details': 'DNS working' if dns_check.rc == 0 else 'DNS issues detected'},
              {'check': 'HTTPS Connectivity', 'status': 'PASS' if https_check.status == 200 else 'WARN', 'details': 'HTTPS working' if https_check.status == 200 else 'HTTPS may have issues'}
            ] }}"

    # SSH and security configuration
    - name: SSH and security configuration checks
      block:
        - name: Check SSH daemon configuration
          stat:
            path: /etc/ssh/sshd_config
          register: ssh_config

        - name: Check SSH service status
          systemd:
            name: "{{ 'sshd' if ansible_os_family == 'Debian' else 'sshd' }}"
          register: ssh_service
          failed_when: false

        - name: Check firewall status (iptables)
          command: iptables -L -n
          register: firewall_check
          changed_when: false
          failed_when: false
          become: yes

        - name: Add SSH and security results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'SSH Configuration', 'status': 'PASS' if ssh_config.stat.exists else 'WARN', 'details': 'SSH config exists' if ssh_config.stat.exists else 'SSH config missing'},
              {'check': 'SSH Service', 'status': 'PASS' if ssh_service.status is defined and ssh_service.status.ActiveState == 'active' else 'INFO', 'details': 'SSH service active' if ssh_service.status is defined and ssh_service.status.ActiveState == 'active' else 'SSH service status unknown'},
              {'check': 'Firewall Status', 'status': 'INFO', 'details': 'Firewall rules present' if firewall_check.rc == 0 and firewall_check.stdout_lines | length > 3 else 'No firewall rules detected'}
            ] }}"

    # Essential tools and utilities check
    - name: Check availability of essential system tools
      block:
        - name: Test essential command line tools
          command: "which {{ item }}"
          register: tool_checks
          changed_when: false
          failed_when: false
          loop:
            - curl
            - wget
            - tar
            - gzip
            - unzip
            - git
            - rsync
            - nano
            - vim

        - name: Process tool availability
          set_fact:
            available_tools: "{{ tool_checks.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | list }}"
            missing_tools: "{{ tool_checks.results | selectattr('rc', 'ne', 0) | map(attribute='item') | list }}"

        - name: Add tool availability results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Essential Tools', 'status': 'INFO', 'details': 'Available: ' + (available_tools | join(', ')) + (', Missing: ' + (missing_tools | join(', ')) if missing_tools else '')}
            ] }}"

    # OS-specific configuration checks
    - name: Alpine-specific configuration checks
      block:
        - name: Check Alpine version and repositories
          command: cat /etc/alpine-release
          register: alpine_version
          changed_when: false

        - name: Check Alpine repositories configuration
          command: cat /etc/apk/repositories
          register: alpine_repos
          changed_when: false

        - name: Check Alpine services (OpenRC)
          command: rc-status
          register: alpine_services
          changed_when: false
          failed_when: false

        - name: Add Alpine-specific results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Alpine Version', 'status': 'INFO', 'details': alpine_version.stdout},
              {'check': 'Alpine Repositories', 'status': 'INFO', 'details': alpine_repos.stdout_lines | length | string + ' repositories configured'},
              {'check': 'Alpine Services', 'status': 'INFO', 'details': 'Service manager operational' if alpine_services.rc == 0 else 'Service manager issues'}
            ] }}"
      when: ansible_os_family == 'Alpine'

    - name: Debian-specific configuration checks
      block:
        - name: Check Debian/Ubuntu version details
          command: lsb_release -a
          register: debian_version
          changed_when: false
          failed_when: false

        - name: Check systemd status
          command: systemctl is-system-running
          register: systemd_status
          changed_when: false
          failed_when: false

        - name: Check apt sources configuration
          command: find /etc/apt/sources.list* -type f
          register: apt_sources
          changed_when: false

        - name: Add Debian-specific results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Distribution Info', 'status': 'INFO', 'details': debian_version.stdout_lines[0] if debian_version.rc == 0 else 'Version info unavailable'},
              {'check': 'Systemd Status', 'status': 'PASS' if 'running' in systemd_status.stdout else 'WARN', 'details': systemd_status.stdout if systemd_status.rc == 0 else 'Systemd status unknown'},
              {'check': 'APT Sources', 'status': 'INFO', 'details': apt_sources.stdout_lines | length | string + ' source files configured'}
            ] }}"
      when: ansible_os_family == 'Debian'

    # Docker and container runtime checks (common in your inventory)
    - name: Check for container runtime
      block:
        - name: Check Docker availability
          command: docker --version
          register: docker_check
          changed_when: false
          failed_when: false

        - name: Check Docker service status
          systemd:
            name: docker
          register: docker_service
          failed_when: false
          when: docker_check.rc == 0

        - name: Add container runtime results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Docker Runtime', 'status': 'PASS' if docker_check.rc == 0 else 'INFO', 'details': docker_check.stdout if docker_check.rc == 0 else 'Docker not installed'},
              {'check': 'Docker Service', 'status': 'PASS' if docker_service.status is defined and docker_service.status.ActiveState == 'active' else 'INFO', 'details': 'Docker service active' if docker_service.status is defined and docker_service.status.ActiveState == 'active' else 'Docker service not active/installed'}
            ] }}"

    # Time synchronization check
    - name: Check time synchronization
      block:
        - name: Check NTP/time sync status
          command: timedatectl status
          register: time_sync
          changed_when: false
          failed_when: false

        - name: Add time sync results
          set_fact:
            check_results: "{{ check_results + [
              {'check': 'Time Synchronization', 'status': 'PASS' if 'synchronized: yes' in time_sync.stdout else 'WARN', 'details': 'Time synchronized' if 'synchronized: yes' in time_sync.stdout else 'Time may not be synchronized'}
            ] }}"
          when: time_sync.rc == 0

    # Final comprehensive results display
    - name: Display comprehensive infrastructure readiness report
      debug:
        msg: |
          
          ================================================================
          INFRASTRUCTURE READINESS REPORT FOR {{ ansible_hostname }}
          ================================================================
          {% for result in check_results %}
          {{ "%-30s" | format(result.check) }} [{{ result.status }}] {{ result.details }}
          {% endfor %}
          ================================================================
          
          Server Details:
          - Hostname: {{ ansible_hostname }} ({{ ansible_fqdn }})
          - IP Address: {{ ansible_default_ipv4.address | default('N/A') }}
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Kernel: {{ ansible_kernel }}
          - Architecture: {{ ansible_architecture }}
          - Memory: {{ (ansible_memtotal_mb / 1024) | round(1) }}GB
          - CPU Cores: {{ ansible_processor_vcpus }}
          - Uptime: {{ ansible_uptime_seconds | int // 86400 }} days, {{ (ansible_uptime_seconds | int % 86400) // 3600 }} hours
          
          Group Memberships:
          {% for group in group_names %}
          - {{ group }}
          {% endfor %}
          
          {% set failed_checks = check_results | selectattr('status', 'equalto', 'FAIL') | list %}
          {% set warn_checks = check_results | selectattr('status', 'equalto', 'WARN') | list %}
          {% if failed_checks %}
          
          🚨 CRITICAL ISSUES ({{ failed_checks | length }}):
          {% for failed in failed_checks %}
          - {{ failed.check }}: {{ failed.details }}
          {% endfor %}
          {% endif %}
          {% if warn_checks %}
          
          ⚠️  WARNINGS ({{ warn_checks | length }}):
          {% for warn in warn_checks %}
          - {{ warn.check }}: {{ warn.details }}
          {% endfor %}
          {% endif %}
          {% if not failed_checks and not warn_checks %}
          
          ✅ Excellent! All critical checks passed. Server is ready for automation.
          {% elif not failed_checks %}
          
          ✅ Good! No critical issues found. Address warnings when convenient.
          {% endif %}

# Summary report across all infrastructure
- name: Generate Infrastructure-Wide Summary Report
  hosts: localhost
  gather_facts: no
  run_once: true
  tasks:
    - name: Create comprehensive infrastructure summary
      debug:
        msg: |
          
          ================================================================
          INFRASTRUCTURE READINESS SUMMARY
          ================================================================
          
          Total Servers Checked: {{ groups['all'] | length }}
          
          Group Breakdown:
          - Alpine Systems: {{ groups['alpine'] | length }}
          - Debian Systems: {{ groups['debian'] | length }}
          - Infrastructure Hosts: {{ groups['infrastructure'] | length }}
          - Application Hosts: {{ groups['apps'] | length }}
          
          Verification Coverage:
          ✓ SSH connectivity and authentication
          ✓ Operating system compatibility and configuration
          ✓ Python runtime and package management
          ✓ Privilege escalation capabilities
          ✓ System resources (disk, memory, CPU)
          ✓ Network connectivity and DNS resolution  
          ✓ SSH daemon and security configuration
          ✓ Essential system tools and utilities
          ✓ Container runtime availability (Docker)
          ✓ Time synchronization status
          ✓ OS-specific configurations (Alpine/Debian)
          
          Next Steps:
          1. Review individual host reports above
          2. Address any CRITICAL issues before running automation
          3. Consider addressing WARNINGS for optimal performance
          4. Ensure all required services are configured per your needs
          
          ================================================================
