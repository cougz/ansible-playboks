---
- name: Deploy SSH private key to all Debian LXCs
  hosts: debian_migration_targets
  gather_facts: yes
      
  vars:
    target_key_path: "/root/.ssh/id_rsa"
    
  tasks:
    - name: Check if Survey variable is provided
      fail:
        msg: "SSH private key must be provided via Survey variable 'ssh_private_key_content'"
      when: ssh_private_key_content is not defined or ssh_private_key_content == ''
      run_once: true

    - name: Validate alpine_source is defined
      fail:
        msg: "alpine_source must be defined for {{ inventory_hostname }} in inventory"
      when: alpine_source is not defined

    - name: Display deployment info
      debug:
        msg: |
          ================================
          Deployment Target: {{ inventory_hostname }}
          Alpine Source: {{ alpine_source }}
          Target key path: {{ target_key_path }}
          ================================

    - name: Check survey variable length
      debug:
        msg: "SSH key survey var length: {{ ssh_private_key_content | length }}"

    - name: Ensure .ssh directory exists with correct permissions
      file:
        path: "{{ target_key_path | dirname }}"
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: Create Python script to format SSH key
      copy:
        content: |
          #!/usr/bin/env python3
          import re
          import sys
          
          key_content = sys.argv[1]
          output_file = sys.argv[2]
          
          # Remove BEGIN/END markers and all whitespace
          key_body = re.sub(r'-----BEGIN OPENSSH PRIVATE KEY-----', '', key_content)
          key_body = re.sub(r'-----END OPENSSH PRIVATE KEY-----', '', key_body)
          key_body = re.sub(r'\s+', '', key_body)
          
          # Write properly formatted key
          with open(output_file, 'w') as f:
              f.write('-----BEGIN OPENSSH PRIVATE KEY-----\n')
              # Split into 64-character lines
              for i in range(0, len(key_body), 64):
                  f.write(key_body[i:i+64] + '\n')
              f.write('-----END OPENSSH PRIVATE KEY-----\n')
          
          print('Key formatted successfully')
        dest: /tmp/format_ssh_key.py
        mode: '0755'

    - name: Format SSH key using Python script
      command: python3 /tmp/format_ssh_key.py "{{ ssh_private_key_content }}" "{{ target_key_path }}"
      register: format_result

    - name: Set proper permissions on SSH key
      file:
        path: "{{ target_key_path }}"
        mode: '0600'

    - name: Test SSH key validity
      command: ssh-keygen -y -f {{ target_key_path }}
      register: key_validation
      ignore_errors: yes
      changed_when: false

    - name: Test SSH connectivity to Alpine source as ansible user
      command: >
        ssh -i {{ target_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        ansible@{{ alpine_source }}
        'echo "SSH connection successful as ansible user"'
      register: alpine_ssh_test
      ignore_errors: yes
      changed_when: false
      when: key_validation is defined and key_validation.rc == 0

    - name: Test sudo access on Alpine source
      command: >
        ssh -i {{ target_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        ansible@{{ alpine_source }}
        'sudo whoami'
      register: alpine_sudo_test
      ignore_errors: yes
      changed_when: false
      when: alpine_ssh_test is defined and alpine_ssh_test.rc is defined and alpine_ssh_test.rc == 0

    - name: Test Docker service on Alpine source
      command: >
        ssh -i {{ target_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        ansible@{{ alpine_source }}
        'sudo docker --version && sudo systemctl is-active docker'
      register: alpine_docker_test
      ignore_errors: yes
      changed_when: false
      when: alpine_sudo_test is defined and alpine_sudo_test.rc is defined and alpine_sudo_test.rc == 0

    - name: Display comprehensive test results
      debug:
        msg: |
          ================================
          Results for {{ inventory_hostname }}
          ================================
          SSH Key: {% if key_validation is defined and key_validation.rc == 0 %}✓ Valid{% else %}✗ Invalid{% endif %}
          Alpine Source ({{ alpine_source }}):
          --------------------------------
          SSH as ansible user: {% if alpine_ssh_test is defined and alpine_ssh_test.rc is defined and alpine_ssh_test.rc == 0 %}✓ Success{% elif alpine_ssh_test is defined and alpine_ssh_test.rc is defined %}✗ Failed{% else %}⚠ Not tested{% endif %}
          Sudo access: {% if alpine_sudo_test is defined and alpine_sudo_test.rc is defined and alpine_sudo_test.rc == 0 %}✓ Success{% elif alpine_sudo_test is defined and alpine_sudo_test.rc is defined %}✗ Failed{% else %}⚠ Not tested{% endif %}
          Docker service: {% if alpine_docker_test is defined and alpine_docker_test.rc is defined and alpine_docker_test.rc == 0 %}✓ Running{% elif alpine_docker_test is defined and alpine_docker_test.rc is defined %}✗ Not running{% else %}⚠ Not tested{% endif %}
          
          Migration readiness: {% if alpine_ssh_test is defined and alpine_ssh_test.rc is defined and alpine_ssh_test.rc == 0 and alpine_sudo_test is defined and alpine_sudo_test.rc is defined and alpine_sudo_test.rc == 0 and alpine_docker_test is defined and alpine_docker_test.rc is defined and alpine_docker_test.rc == 0 %}✓ Ready{% else %}✗ Not ready{% endif %}
          ================================

    - name: Summary of any issues
      debug:
        msg: |
          WARNING: Issues detected for {{ inventory_hostname }}
          Alpine source: {{ alpine_source }}
          
          {% if alpine_ssh_test is defined and alpine_ssh_test.rc is defined and alpine_ssh_test.rc != 0 %}
          SSH Error: {{ alpine_ssh_test.stderr | default('SSH connection as ansible user failed') }}
          {% endif %}
          {% if alpine_sudo_test is defined and alpine_sudo_test.rc is defined and alpine_sudo_test.rc != 0 %}
          Sudo Error: {{ alpine_sudo_test.stderr | default('Sudo access failed') }}
          {% endif %}
          {% if alpine_docker_test is defined and alpine_docker_test.rc is defined and alpine_docker_test.rc != 0 %}
          Docker Error: {{ alpine_docker_test.stderr | default('Docker service issue') }}
          {% endif %}
          
          Please verify:
          1. SSH key is correct and matches ansible user's authorized_keys
          2. ansible user exists on {{ alpine_source }}
          3. ansible user has sudo privileges on {{ alpine_source }}
          4. Docker service is running on {{ alpine_source }}
      when: (alpine_ssh_test is defined and alpine_ssh_test.rc is defined and alpine_ssh_test.rc != 0) or (alpine_sudo_test is defined and alpine_sudo_test.rc is defined and alpine_sudo_test.rc != 0) or (alpine_docker_test is defined and alpine_docker_test.rc is defined and alpine_docker_test.rc != 0)
