---
- name: Distribute SSH private key to Debian LXCs and test Alpine connectivity
  hosts: debian_migration_targets
  gather_facts: yes
      
  vars:
    target_key_path: "~/.ssh/id_rsa"
    # Get SSH key from Semaphore environment variable
    ssh_private_key_content: "{{ lookup('env', 'ssh_private_key') | default('') }}"
    
  tasks:
    - name: Check if SSH private key is provided via environment variable
      fail:
        msg: |
          SSH private key must be provided via 'ssh_private_key' environment variable.
          In Semaphore UI: Ensure environment variable 'ssh_private_key' is set with your private key content.
          Command line: ssh_private_key='$(cat ~/.ssh/id_rsa)' ansible-playbook ...
      when: ssh_private_key_content == ''
      run_once: true

    - name: Validate private key format
      fail:
        msg: "Invalid SSH private key format. Must contain BEGIN and END markers."
      when: |
        'BEGIN' not in ssh_private_key_content or 
        'END' not in ssh_private_key_content
      run_once: true

    - name: Validate alpine_source is defined
      fail:
        msg: "alpine_source must be defined for {{ inventory_hostname }} in inventory"
      when: alpine_source is not defined

    - name: Test connectivity to Debian LXC
      ping:

    - name: Display deployment info
      debug:
        msg: |
          ================================
          Deployment Target: {{ inventory_hostname }}
          Alpine Source: {{ alpine_source }}
          Target key path: {{ target_key_path }}
          User: {{ ansible_user | default('root') }}
          ================================

    - name: Ensure .ssh directory exists with correct permissions
      file:
        path: "{{ target_key_path | dirname }}"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user | default('root') }}"
        group: "{{ ansible_user | default('root') }}"

    - name: Backup existing SSH key if present
      copy:
        src: "{{ target_key_path }}"
        dest: "{{ target_key_path }}.backup.{{ ansible_date_time.epoch | default(ansible_date_time.year + ansible_date_time.month + ansible_date_time.day + ansible_date_time.hour + ansible_date_time.minute) }}"
        remote_src: yes
        mode: '0600'
      ignore_errors: yes
      when: ansible_date_time is defined

    - name: Deploy SSH private key to Debian LXC
      copy:
        content: "{{ ssh_private_key_content }}"
        dest: "{{ target_key_path }}"
        mode: '0600'
        owner: "{{ ansible_user | default('root') }}"
        group: "{{ ansible_user | default('root') }}"
      register: key_deployment
      no_log: true

    - name: Verify key file exists and has correct permissions
      stat:
        path: "{{ target_key_path }}"
      register: remote_key_stat

    - name: Test SSH key validity (local check)
      command: ssh-keygen -y -f {{ target_key_path }}
      register: key_validation
      ignore_errors: yes
      changed_when: false

    - name: Test SSH connectivity to Alpine source as ansible user
      command: >
        ssh -i {{ target_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        ansible@{{ alpine_source }}
        'echo "SSH connection successful as ansible user"'
      register: alpine_ssh_test
      ignore_errors: yes
      changed_when: false
      when: key_validation is defined and key_validation.rc == 0

    - name: Test sudo access on Alpine source
      command: >
        ssh -i {{ target_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        ansible@{{ alpine_source }}
        'sudo whoami'
      register: alpine_sudo_test
      ignore_errors: yes
      changed_when: false
      when: alpine_ssh_test is defined and alpine_ssh_test.rc == 0

    - name: Test root SSH connectivity to Alpine source (fallback)
      command: >
        ssh -i {{ target_key_path }}
        -o StrictHostKeyChecking=no
        -o ConnectTimeout=10
        -o BatchMode=yes
        root@{{ alpine_source }}
        'echo "SSH connection successful as root user"'
      register: alpine_root_ssh_test
      ignore_errors: yes
      changed_when: false
      when: alpine_ssh_test.rc != 0

    - name: Display comprehensive test results
      debug:
        msg: |
          ================================
          Results for {{ inventory_hostname }}
          ================================
          Key deployed: {% if key_deployment.changed %}✓ Success{% else %}Already present{% endif %}
          Key valid: {% if key_validation is defined and key_validation.rc == 0 %}✓ Valid{% elif key_validation is defined %}✗ Invalid{% else %}⚠ Not tested{% endif %}
          Key permissions: {{ remote_key_stat.stat.mode | default('unknown') }}
          
          Alpine Source Tests ({{ alpine_source }}):
          --------------------------------
          SSH as ansible user: {% if alpine_ssh_test is defined and alpine_ssh_test.rc == 0 %}✓ Success{% elif alpine_ssh_test is defined %}✗ Failed{% else %}⚠ Not tested{% endif %}
          Sudo access: {% if alpine_sudo_test is defined and alpine_sudo_test.rc == 0 %}✓ Success{% elif alpine_sudo_test is defined %}✗ Failed{% else %}⚠ Not tested{% endif %}
          {% if alpine_root_ssh_test is defined %}
          SSH as root (fallback): {% if alpine_root_ssh_test.rc == 0 %}✓ Success{% else %}✗ Failed{% endif %}
          {% endif %}
          
          Migration readiness: {% if alpine_ssh_test is defined and alpine_ssh_test.rc == 0 and alpine_sudo_test is defined and alpine_sudo_test.rc == 0 %}✓ Ready{% elif alpine_root_ssh_test is defined and alpine_root_ssh_test.rc == 0 %}⚠ Root only{% else %}⚠ Tests skipped or failed{% endif %}
          ================================

    - name: Summary of any connection failures
      debug:
        msg: |
          WARNING: Connection issues detected for {{ inventory_hostname }}
          Alpine source: {{ alpine_source }}
          
          ansible user SSH: {{ alpine_ssh_test.stderr | default('Connection failed or not tested') }}
          sudo access: {{ alpine_sudo_test.stderr | default('Sudo failed or not tested') }}
          
          Please verify:
          1. SSH key is correct
          2. ansible user exists on {{ alpine_source }}
          3. ansible user has sudo privileges
          4. SSH service is running on {{ alpine_source }}
      when: (alpine_ssh_test is defined and alpine_ssh_test.rc != 0) or (alpine_sudo_test is defined and alpine_sudo_test.rc != 0)
