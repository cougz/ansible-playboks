# File: templates/otel-agent-install.sh.j2
#!/bin/sh

echo "Starting OpenTelemetry agent installation..."

# Install dependencies
echo "Installing required packages..."
apk add --no-cache curl tar gzip supervisor wget

# Create directories if they don't exist
echo "Creating necessary directories..."
mkdir -p /etc/otel /var/log/otel /usr/local/bin /etc/supervisor.d

# Download and install the OpenTelemetry Collector
OTEL_VERSION="{{ otel_collector_version }}"
echo "Downloading and installing OpenTelemetry Collector ${OTEL_VERSION}..."
if [ ! -f /usr/local/bin/otelcol ]; then
  curl -sSL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${OTEL_VERSION}/otelcol_${OTEL_VERSION}_linux_amd64.tar.gz | tar xz -C /tmp/
  if [ ! -f /tmp/otelcol ]; then
    echo "ERROR: Failed to extract otelcol binary from downloaded archive. Check /tmp/ directory."
    exit 1
  fi
  mv /tmp/otelcol /usr/local/bin/
  chmod +x /usr/local/bin/otelcol
  echo "Collector binary installed at /usr/local/bin/otelcol"
else
  echo "OpenTelemetry Collector is already installed."
fi

# Verify the binary is present and executable
if [ ! -x /usr/local/bin/otelcol ]; then
  echo "ERROR: otelcol binary is not executable or not found."
  exit 1
fi

# Print version info
echo "Installed collector version:"
/usr/local/bin/otelcol --version

# Generate a working configuration
echo "Creating collector configuration..."
cat > /etc/otel/config.yaml << EOF
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
      memory:
      disk:
      filesystem:
      network:
      load:
      paging:

processors:
  batch:
  
  resource:
    attributes:
      - key: service.name
        value: "lxc-$(hostname)"
        action: upsert
      - key: service.instance.id
        value: "$(hostname)"
        action: upsert
      - key: host.name 
        value: "$(hostname)"
        action: upsert
      - key: os.type
        value: "linux"
        action: upsert
      - key: deployment.environment
        value: "production"
        action: upsert

exporters:
  otlp:
    endpoint: "{{ otel_collector_endpoint }}"
    tls:
      insecure: true
  
  logging:
    verbosity: basic

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch, resource]
      exporters: [otlp]
    
    metrics:
      receivers: [hostmetrics, otlp]
      processors: [batch, resource]
      exporters: [otlp]
    
    logs:
      receivers: [otlp]
      processors: [batch, resource]
      exporters: [otlp]
EOF

echo "Created configuration at /etc/otel/config.yaml"

# Create a supervisor configuration for the OTel collector
echo "Setting up supervisor configuration..."
cat > /etc/supervisor.d/otel-collector.ini << EOF
[program:otel-collector]
command=/usr/local/bin/otelcol --config=/etc/otel/config.yaml
autostart=true
autorestart=true
startretries=5
startsecs=10
user=root
redirect_stderr=true
stdout_logfile=/var/log/otel/collector.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
priority=100
EOF

echo "Created supervisor config at /etc/supervisor.d/otel-collector.ini"

# Check if supervisord config exists
if [ ! -f /etc/supervisord.conf ]; then
  echo "Creating main supervisord configuration..."
  cat > /etc/supervisord.conf << SUPERVISORCONFIG
[unix_http_server]
file=/var/run/supervisor.sock

[supervisord]
logfile=/var/log/supervisord.log
logfile_maxbytes=10MB
logfile_backups=5
loglevel=info
pidfile=/var/run/supervisord.pid
nodaemon=false

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[include]
files = /etc/supervisor.d/*.ini
SUPERVISORCONFIG
  echo "Created /etc/supervisord.conf"
fi

# Make sure supervisor is enabled to start at boot
echo "Enabling supervisord at startup..."
rc-update add supervisord default

# Start supervisord if not already running
echo "Starting supervisord service..."
if ! pgrep supervisord > /dev/null; then
  /usr/bin/supervisord -c /etc/supervisord.conf
  echo "Supervisord started."
else
  echo "Supervisord already running, reloading configuration..."
  supervisorctl reread
  supervisorctl update
  echo "Restarting collector with new configuration..."
  supervisorctl restart otel-collector
fi

# Check if collector is running
echo "Checking collector status..."
sleep 5  # Give it a moment to start
supervisorctl status otel-collector
COLLECTOR_STATUS=$?

if [ $COLLECTOR_STATUS -ne 0 ]; then
  echo "WARNING: Collector status check failed or collector not started."
  echo "Checking collector logs..."
  cat /var/log/otel/collector.log
else
  echo "OpenTelemetry Collector is running successfully!"
  
  echo ""
  echo "The OpenTelemetry Agent is now set up and running!"
  echo "- It is collecting system metrics from this host"
  echo "- It is accepting application telemetry via OTLP (gRPC on port 4317, HTTP on port 4318)"
  echo "- All telemetry is being sent to your central collector at {{ otel_collector_endpoint }}"
fi

echo ""
echo "Installation complete."
echo "You can:"
echo "- Check agent status anytime with: supervisorctl status otel-collector"
echo "- View agent logs with: cat /var/log/otel/collector.log"
echo "- Restart the agent with: supervisorctl restart otel-collector"
