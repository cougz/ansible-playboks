---
- name: Update OpenTelemetry Agent Configuration
  hosts: debian
  remote_user: ansible
  become: true
  become_user: root
  vars:
    # otel_collector_endpoint will be set via survey variable
    otel_config_path: "/etc/otel/config.yaml"
    
  tasks:
    # Gather facts to get hostname
    - name: Gather system facts
      setup:
        filter: ansible_hostname
    
    # Validate that otel_collector_endpoint is provided
    - name: Validate otel_collector_endpoint is provided
      fail:
        msg: "otel_collector_endpoint must be provided via survey variable"
      when: otel_collector_endpoint is not defined or otel_collector_endpoint == ""
    
    # Check if OpenTelemetry is installed
    - name: Check if OpenTelemetry collector binary exists
      stat:
        path: "/usr/local/bin/otelcol"
      register: otel_binary
      
    - name: Check if OpenTelemetry config exists
      stat:
        path: "{{ otel_config_path }}"
      register: otel_config
      
    - name: Fail if OpenTelemetry is not installed
      fail:
        msg: "OpenTelemetry collector is not installed. Please run the installation playbook first."
      when: not otel_binary.stat.exists or not otel_config.stat.exists
    
    # Backup existing configuration
    - name: Backup existing OpenTelemetry configuration
      copy:
        src: "{{ otel_config_path }}"
        dest: "{{ otel_config_path }}.backup.{{ ansible_date_time.epoch }}"
        remote_src: yes
        backup: yes
      register: config_backup
      
    - name: Report backup location
      debug:
        msg: "Configuration backed up to: {{ config_backup.dest }}"
    
    # Update configuration with correct hostname
    - name: Update OpenTelemetry configuration
      copy:
        dest: "{{ otel_config_path }}"
        content: |
          receivers:
            otlp:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:4317
                http:
                  endpoint: 0.0.0.0:4318
            
            hostmetrics:
              collection_interval: 30s
              scrapers:
                cpu:
                memory:
                disk:
                filesystem:
                network:
                load:
                paging:

          processors:
            batch:
            
            resource:
              attributes:
                - key: service.name
                  value: "lxc-{{ ansible_hostname }}"
                  action: upsert
                - key: service.instance.id
                  value: "{{ ansible_hostname }}"
                  action: upsert
                - key: host.name 
                  value: "{{ ansible_hostname }}"
                  action: upsert
                - key: os.type
                  value: "linux"
                  action: upsert
                - key: deployment.environment
                  value: "production"
                  action: upsert

          exporters:
            otlp:
              endpoint: "{{ otel_collector_endpoint }}"
              tls:
                insecure: true
            
            logging:
              verbosity: basic

          service:
            pipelines:
              traces:
                receivers: [otlp]
                processors: [batch, resource]
                exporters: [otlp]
              
              metrics:
                receivers: [hostmetrics, otlp]
                processors: [batch, resource]
                exporters: [otlp]
              
              logs:
                receivers: [otlp]
                processors: [batch, resource]
                exporters: [otlp]
        mode: '0644'
      notify: restart otel collector
      
    # Since --dry-run doesn't exist, we'll restart the collector
    # which will validate the config on startup
    - name: Force handler execution to restart collector
      meta: flush_handlers
      
    # Give the collector time to start and validate config
    - name: Wait for collector to start
      pause:
        seconds: 5
        
    # Check if collector is running after config update
    - name: Check collector status
      shell: supervisorctl status otel-collector | grep RUNNING
      register: final_status
      changed_when: false
      failed_when: false
      
    - name: Report final status
      debug:
        msg: |
          {% if final_status.rc == 0 %}
          OpenTelemetry collector configuration updated successfully and is running
          {% else %}
          WARNING: Collector may not be running. Check logs with: supervisorctl tail -f otel-collector
          {% endif %}
          
    - name: Show collector logs if not running
      shell: tail -50 /var/log/otel/collector.log
      register: collector_logs
      when: final_status.rc != 0
      changed_when: false
      failed_when: false
      
    - name: Display collector logs if issues
      debug:
        msg: "{{ collector_logs.stdout_lines }}"
      when: final_status.rc != 0 and collector_logs.stdout_lines is defined
    
  handlers:
    - name: restart otel collector
      supervisorctl:
        name: otel-collector
        state: restarted
      register: restart_result
      
    - name: wait for collector restart
      pause:
        seconds: 5
      when: restart_result is changed
      
    - name: verify collector is running
      shell: supervisorctl status otel-collector | grep RUNNING
      register: collector_status
      changed_when: false
      failed_when: collector_status.rc != 0
      when: restart_result is changed
      
    - name: report restart status
      debug:
        msg: "OpenTelemetry collector restarted successfully and is running"
      when: restart_result is changed and collector_status.rc == 0
